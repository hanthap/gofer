<html>
<head>
    <script src="https://d3js.org/d3.v7.min.js"></script>

</head>
<body>
    <script>

function segInt(a1, a2, b1, b2) {
    // Ensure a1 <= a2 and b1 <= b2
    var leftBound = Math.max(a1, b1),
      rightBound = Math.min(a2, b2);
  // console.log([leftBound, rightBound]);
    // Check if there's an actual intersection
    return (leftBound <= rightBound) ? [leftBound, rightBound, (rightBound-leftBound) ] : [null,null,0];
}
//--------------------------------------------------------------------

        let margin = {
          top: 100,
          right: 100,
          bottom: 100,
          left: 100
        };
        
        let width = 800,
          height = 600,
          padding = 0, // separation between same-color rects
          clusterPadding = 1, // separation between different-color rects
          maxRadius = 80;
        
        let nNodes = 16, // total number of nodes
          nClusters = 4, // number of distinct clusters
          z = d3.scaleOrdinal(d3.schemeCategory10),
          clusters = new Array(nClusters);
        
        let svg = d3.select('body')
          .append('svg')
          .attr('height', height)
          .attr('width', width)
          .append('g').attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');
        
          // generate a random dataset of nodes
        let nodes = d3.range(nNodes).map(() => {
          let i = Math.floor(Math.random() * nClusters), // randomly assign node to a cluster
            radius = Math.random() * maxRadius,
            d = {
              cluster: i,
              x : Math.random() * width,
              y : Math.random() * height,
              height: radius * ( 1+Math.random() ),
              width: radius * ( 1+Math.random() ),
              area: height * width // could use this as "inertial mass" for attractive force?
            };
            d.area = d.height * d.width;
            // anchor each cluster to its largest member datum node
          if (!clusters[i] || (d.area > clusters[i].area)) clusters[i] = d;
          return d;
        });
        console.clear();
        console.log(nodes);
        
        let rects = svg.append('g')
          .datum(nodes)
          .selectAll('.rect')
          .data(d => d)
          .enter().append('rect')
          .attr('height', (d) => d.height)
          .attr('width', (d) => d.width)
          .attr('fill', (d) => z(d.cluster))
          .attr('opacity', 0.6)
          .attr('stroke', 'black')
          .attr('stroke-width', 1);
        
        let simulation = d3.forceSimulation(nodes)
          .velocityDecay(0.4)
          .alpha(1)
          .force("x", d3.forceX().strength(.03))
          .force("y", d3.forceY().strength(.03))
          .force("collider1", collider1) // <<-------- CUSTOM FORCE
          .force('centre', d3.forceCenter().strength(0.6))
 //         .force("collider2", collider2) // <<-------- CUSTOM FORCE
      //    .force("cluster", clustering) //<<------- CUSTOM FORCE 
          .on("tick", ticked);
        
        function ticked() {
            // set the DOM element's position using its new (top-left corner) coordinates, as last updated in datum
          rects
            .attr('x', (d) => d.x)
            .attr('y', (d) => d.y);
        }
        
        // Custom 'clustering' force implementation.
        // aim is to move each node towards the biggest rect in its cluster
        function clustering(alpha) {
          nodes.forEach(function(n) {
            var c = clusters[n.cluster];
            if (c === n) return;
            // maybe we can just leavet it to the collision function to resolve ALL overlaps?
            var // what's the smallest gap now (distance between the 2 closest non-overlapping sides)? 
              xGapRight = Math.max( 0, c.x - ( n.x + n.width ) ),  // +ve means cluster is fully to the right of n, so n.x will increase (and c.x will decrease)
              xGapLeft =  Math.max( 0, n.x - ( c.x + c.width ) ),  // +ve means cluster is fully to the left of n
              yGapBelow = Math.max( 0, c.y - ( n.y + n.height ) ), // +ve means cluster is fully below n
              yGapAbove = Math.max( 0, n.y - ( c.y + c.height ) ); // +ve means cluster is fully above n
            ;
          //   console.log([xGapRight,xGapLeft, yGapBelow,yGapAbove]);
            // The smallest non-zero gap is all that matters. We want this measure to approach zero, at a speed proportional to decreasing alpha
            xGap = [xGapRight,-xGapLeft].find( num => num != 0 );
            yGap = [yGapBelow,-yGapAbove].find( num => num != 0 );
            g = [xGap,yGap].filter( num => num !== null); // ignore nulls
            gap = g.map(Math.abs); // ignore sign
            minGap = Math.min(...gap); // what is the magnitude of the smaller gap?
           // console.log([xGap, yGap, minGap]);

            if (minGap > padding) {  // not already "touching"
            
              nudge_factor = minGap * alpha; //  goal is for n to touch the cluster node (but not overlap)
              if ( nudge_factor > 0 ) {
            //    console.log([xGap, yGap, minGap, nudge_factor]);

                 if (xGap > 0)  { 
//debugger;
                      n.x += xGap * nudge_factor * c.area; 
                     c.x -= xGap * nudge_factor * n.area;
                   }

                   if (yGap > 0)  { 
                      n.y += yGap * nudge_factor; 
                      c.y -= yGap * nudge_factor;
                   }

           }
            }
          });
        }

        function collider1(alpha) { collide(alpha,true) };
        function collider2(alpha) { collide(alpha,false) };

        // Custom 'collide' force implementation. doesn't treat the cluster node as special
        function collide(alpha, mode) {
            // full cartesian join filtered where m.area >= n.area and overlap > 0 (and only where the two node types 'must not overlap' )
            // heavier shapes should displace lighter shapes & not the other way. Maybe with zero recoil?

            nodes.forEach(function(n) { // outer loop
            var 
              nx1 = n.x, // left 
              nx2 = n.x + n.width, // right
              ny1 = n.y, // top
              ny2 = n.y + n.height; // bottom

            nodes.forEach( m => { // inner loop

              if ( m // non-empty 
                && (m !== n) // no need to compare with self
                && ( m.area >= n.area ) 
                  )
                { 
                  try {
                    var
                        x_int = segInt( m.x, m.x+m.width, nx1, nx2), // horizontal intersection
                        y_int = segInt( m.y, m.y+m.height, ny1, ny2), // vertical intersection
                        [x,y] = [x_int[2], y_int[2]],
                        overlap_area = x * y ; 
                  } catch (e) { 
                      console.log(e);
                      overlap_area = 0 
                      }

                if (overlap_area) { // the 2 rects actually do overlap
                  total_area = m.area + n.area;
                   nudge_factor = 10 * alpha ; // for smooth animation
                   // nudge_factor = 1/ 1000;
                    if (!mode) nudge_factor *= -1;
                   // push apart in the direction where the encroachment is SMALLER
                  // simulate inertia by nudging the 2 shapes in proportion to their relative "mass"  (area)
                  if ( x <= y ) { // smaller encroachment is in the horizontal dimension
                    n.x += x * nudge_factor * m.area / total_area; // nudge n away from m
                    m.x -= x * nudge_factor * n.area / total_area; // recoil nudge m in the opposite direction, away from n
                    }
                  if ( y < x ) {
                    n.y += y * nudge_factor * m.area / total_area; // nudge n away from m
                    m.y -= y * nudge_factor * n.area / total_area; // recoil nudge m in the opposite direction, away from n
                    }

                  }
              }
            });
          });
        }
        </script>
</body>
</html>
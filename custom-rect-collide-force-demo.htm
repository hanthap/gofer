<html>
<head>
    <script src="https://d3js.org/d3.v7.min.js"></script>

</head>
<body>
<script>

function segInt(a1, a2, b1, b2) {
    // Ensure a1 <= a2 and b1 <= b2
    var leftBound = Math.max(a1, b1),
      rightBound = Math.min(a2, b2);
  // console.log([leftBound, rightBound]);
    // Check if there's an actual intersection
    return (leftBound <= rightBound) ? [leftBound, rightBound, (rightBound-leftBound) ] : [null,null,0];
}
//--------------------------------------------------------------------

        let margin = {
          top: 100,
          right: 100,
          bottom: 100,
          left: 100
        };
        
        let svg_width = 800,
            svg_height = 600,
          padding = 0; // separation 
        
        let nNodes = 36, // total number of nodes
          nClusters = 6, // number of distinct clusters
          z = d3.scaleOrdinal(d3.schemeCategory10),
          maxRadius = 60
          ;
        
        let svg = d3.select('body')
          .append('svg')
          .attr('height', svg_height)
          .attr('width', svg_width)
          .append('g').attr('transform', 'translate(' + svg_width / 2 + ',' + svg_height / 2 + ')');
        
          // generate a random dataset of nodes
        let nodes = d3.range(nNodes).map(() => {
          let i = Math.floor(Math.random() * nClusters), // randomly assign node to a cluster
            radius = Math.random() * maxRadius,
            d = {
              cluster: i,
              x : Math.random() * svg_width,
              y : Math.random() * svg_height,
              r: radius,
              height: radius * ( 1+Math.random() ),
              width: radius * ( 1+Math.random() ),
              cx : 0,
              cy : 0,
              type: i % 2 ? 'rect' : 'circle',
              area: 0 // "inertial mass" 
            };
            d.r = Math.min(d.height,d.width)/2;
            d.area = i % 2 ? d.height * d.width : Math.PI * d.r * d.r;
            d.cx = d.x + d.width/2;
            d.cy = d.y + d.height/2;


          return d;
        });
        console.clear();
      //  console.log(nodes);

        let rects = svg.append('g')
          .datum(nodes.filter(d=>d.type=='rect'))
          // .datum(nodes)
          .selectAll('.rect')
          .data(d => d)
          .enter().append('rect')
          .attr('height', (d) => d.height)
          .attr('width', (d) => d.width)
          .attr('fill', (d) => z(d.cluster))
          .attr('opacity', 0.6)
          .attr('stroke', 'black')
          .attr('stroke-width', 1);

        let circles = svg.append('g')
          .selectAll('.circle')
          .data(nodes.filter(d=>d.type=='circle'))
          .join('circle')
          .attr('cx', d => d.x + d.width/2)
          .attr('cy', d => d.y + d.height/2)
          .attr('r', d => d.width/2)
          .attr('fill', d => z(d.cluster))
          .attr('opacity', 0.6)
          .attr('stroke', 'black')
          .attr('stroke-width', 1)
          ;

        let simulationRect = d3.forceSimulation(nodes.filter(d=>d.type=='rect'))
          // .velocityDecay(0.4)
          // .alpha(1)
          // .alphaDecay(0.01)
         // .alphaTarget(0.1)
         // TO DO: how to get x,y forces to decay faster than collide, and without jitter
          .force("x", d3.forceX().strength( d => d.area / 100000 )) // heavier shapes go to centre
          .force("y", d3.forceY().strength( d => d.area / 100000 ))
          .force('centre', d3.forceCenter()) // overall centre 
          .force("collide", collide) // avoid overlapping 
          .on("tick", ticked)
          .tick(60) // fast forward to reduce visual jitter
          ;
          

          let simulationCircle = d3.forceSimulation(nodes.filter(d=>d.type=='circle'))
          .force("x", d3.forceX().strength( d => d.area / 100000 )) // heavier shapes go to centre
          .force("y", d3.forceY().strength( d => d.area / 100000 ))
          .force('centre', d3.forceCenter()) // overall centre 
          .force("collide", collide) // avoid overlapping 
          .on("tick", ticked)
          .tick(60) // fast forward to reduce visual jitter
          ;

        function ticked() {
            // set the DOM element's position using its new (top-left corner) coordinates, as last updated in datum
          rects
            .attr('x', d => d.x)
            .attr('y', d => d.y);

          circles
          .attr('cx', d => d.x + d.width/2)
          .attr('cy', d => d.y + d.height/2)

        }
        // Custom 'collide' force implementation
        function collide(alpha) {
            // full cartesian join filtered where m.area >= n.area and overlap > 0 (and only where the two node types 'must not overlap' )
            // heavier shapes should displace lighter shapes & not the other way. Maybe with zero recoil?
            // Problem: this force seems to lose strength faster than the others. How to compensate, so shapes don't gradually start overlapping?
            nodes.forEach( n => { // outer loop
            var 
              nx1 = n.x, // left 
              nx2 = n.x + n.width, // right
              ny1 = n.y, // top
              ny2 = n.y + n.height; // bottom

            nodes.forEach( m => { // inner loop

              if ( m // non-empty 
                && (m !== n) // no need to compare with self
                && ( m.area >= n.area )  // avoid (most) double-processing
                  )
                { 
                  try {
                    var
                        x_int = segInt( m.x, m.x+m.width, nx1, nx2), // horizontal intersection
                        y_int = segInt( m.y, m.y+m.height, ny1, ny2), // vertical intersection
                        [x,y] = [x_int[2], y_int[2]],
                        overlap_area = x * y ; 
                  } catch (e) { 
                      console.log(e);
                      overlap_area = 0 
                      }

                if (overlap_area) { // the 2 rects actually do overlap
                    nudge_factor = 20 * alpha / Math.max( m.area + n.area ) ; // for smooth animation
                   [x,y] = escape_vector( m, n ); // "shortest way out" 
                    n.x += padding + x * nudge_factor * m.area ; // nudge n away from m
                    m.x -= padding + x * nudge_factor * n.area; // x recoil 
                    n.y += padding + y * nudge_factor * m.area; // nudge n away from m
                    m.y -= padding + y * nudge_factor * n.area; // y recoil 

                  }
              }
            });
          });
          ticked(); // help reduce some jitter when a shape bounces between 2 neighbours
        }

// which direction is the shortest way out?

function escape_vector( m, n ) {
  
  // Which list item has the smallest absolute value?
  x = [n.x-(m.x+m.width), (n.x+n.width)-m.x ] ;
  x = x.reduce((min, num) => Math.abs(num) < Math.abs(min) ? num : min );

  y = [n.y-(m.y+m.height), (n.y+n.height)-m.y ] ;
  y = y.reduce((min, num) => Math.abs(num) < Math.abs(min) ? num : min );

  return Math.abs(x) < Math.abs(y) ? [-x,0] : [0,-y]

}

</script>
</body>
</html>
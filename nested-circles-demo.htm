<html>
<head>
    <script src="https://d3js.org/d3.v7.min.js"></script>
</head>
<body>
<script>
//--------------------------------------------------------------------

console.clear();


let margin = {
  top: 100,
  right: 100,
  bottom: 100,
  left: 100
};

let svg_width = 900,
    svg_height = 600
;

class MyNode {
    constructor( id, x, y, r, parent ) {
        this.id = id;
        this.x = x;
        this.y = y;
        this.r = r;
        this.parent = parent;
        this.fill_colour = 'red'
    }

    get FillColour() {
        return this.fill_colour;
    }

    get Height() {
        return 2*this.r;
    }

    get Width() {
        return 3*this.r;
    }
}


class MyRect extends MyNode {
    constructor( id, x, y, r, parent ) {
        super( id, x, y, r, parent )
    }

}

let nodes = [
    new MyNode( 1, 100, 200, 30, 2 ),
    new MyNode( 2, -150, 250, 20, null ),
    new MyNode( 3, 300, 200, 40, 2 ),
    new MyRect( 4, 250, 150, 30 ),
    new MyNode( 5, 300, -200, 40, 4 )
];

// pragma "extend the class" by adding custom methods directly to the D3 prototype
d3.selection.prototype.AddChildRect = function() { 
    this // initially a selection of 'g' elements
    .append('rect') // creates a CHILD 'rect' for each selected 'g' element & returns the result AS A NEW SELECTION
      .attr('width', d => d.Width ) // set attribute of each element in the fresh selection (= newly-added child rects)
      .attr('height', d => d.Height )
      .attr('fill', d => d.FillColour )
      .attr('opacity', 0.2)
}

  //--------------------------------------------------------------------

let svg = d3.select('body')
    .append('svg')
    .attr('height', svg_height)
    .attr('width', svg_width)
    .append('g') // this 'mother of all groups' will contain all composite 'g' nodes
    .attr('transform', 'translate(' + svg_width / 2 + ',' + svg_height / 2 + ')'); // assume this applies to the top g node, not the outer svg
    // result is an element object, NOT bound to a data node

//--------------------------------------------------------------------
top_group = svg.selectAll("g");  // returns a custom D3 Selection object with members _groups and _parents. 
// member "_groups" is an EMPTY Array of NodeList objects.  _parents is an Array of 1x 'g' elements
// it's an instance of the Selection class. NOT a built-in Javascript iterator
// behaves like an array but also has extra methods. It's a chainable API (returns 'this') meaning you can apply multiple operations in sequence eg .attr(), .style(), 
// supports iteration with .each() or .nodes() 
// .nodes() will return a standard array

top_folder_groups = top_group // requires a D3 Selection object as returned by selectAll(), supporting chainable API
    .data( 
        nodes.filter(d=>d.parent == null), // an Array of qualifying data nodes, to be linked with the D3 Selection of DOM elements  
        d=>d.id // (optional) explicit key function that uniquely identifies the data point. This prevents random change in bindings later.
        // D3 takes the returned ID value and stores it in the DOM element, as a custom data attr called 'data-id', useful for filtered selections later
        ) // default is to simply compare the 2 list counts and flag the last N data nodes as "unbound"
    .enter() // creates special PLACEHOLDER elements just for the unbound data nodes (if any), pipes the result as a multi-Selection object
    // unbound nodes are detected using the key function, if provided
    .append('g') // They're all special placeholder elements, so are CONVERTED to 'g' instead of creating a child
        // returns a selection with all the newly converted elements
        .attr('data-myid', d=>d.id); // "data-" attributes are HTML's way to tag an element with arbitrary key-value pairs, without side effects
    // you can retrieve ALL custom data attributes of an HTML element via its "dataset" member. The "data-" prefix is already trimmed.
    // RESULT: top_folder_groups is a custom object with class members "_groups" and "_parents". Both are Arrays of Arrays.
    // member "_groups" is an array of 2x BOUND 'g' elements.   
    // BOUND means they each have a "__data__" member that references a particular data node (datum)
    // the referenced datum stores all the properties we defined explicitly in "nodes" above PLUS many others managed by d3: vx, vy, index (& heaps of others)
    // the datum may be an instance of a user-defined class, which means we can achieve OOP polymorphism and invoke overloaded methods via 'this'

top_folder_groups.AddChildRect(); // invoke the encapsulated method we added to the standard D3 prototype

circle_groups = top_folder_groups
    .data(nodes.filter(d=>d.parent != null)) // for each leaf datum in nodes...
    .enter() // create extra elements if needed (if there are more nodes than elements in the , )
    .append('g') // add a 'g' child element, one per member node, to encapsulate all its nested sub-elements (eg  circle + foreignObject or maybe even another container g node)
    ;

circle_groups
    .append('circle')
      .attr('r', d => d.r)
      .attr('fill', 'blue')
      .attr('opacity', 0.6)
      .attr('stroke', 'black')
      .attr('stroke-width', 1)
      ;

      /*
circle_groups
  .append("foreignObject") // add a second child element per node-group. 
  .attr("x", d=>-d.r)
  .attr("y", d=>-d.r)
  .attr("width", d=> d.width)
  .attr("height", d=> d.height)
  .append("xhtml:div") // add a grandchild DIV element inside the foreignObject - we need the strictness of XHTML when inside an SVG 
    .style("font-size", "8px")
    .style("justify-content", "center")
    .style("display", "flex")
    .style("height", "100%")
    .style("width", "100%")
    .style("align-items", "center")
    .style("font-family", "Helvetica")
    //.style("padding", "5px")
*/

//--------------------------------------------------------------------


let simulationCircle = d3.forceSimulation(nodes)
    .force("x", d3.forceX())
    .force("y", d3.forceY())
    .force('centre', d3.forceCenter()) 
   // .force("collide", d3.forceCollide() )
    .on("tick", ticked)
//         .tick(60) 
          ;
//--------------------------------------------------------------------
function ticked() {
    circle_groups.attr("transform", d => `translate(${d.x-d.r/4}, ${d.y-d.r/4})`);
    top_folder_groups.attr("transform", d => `translate(${d.x-3*d.r/2}, ${d.y-d.r})`);
  
}

//--------------------------------------------------------------------
</script>
</body>
</html>